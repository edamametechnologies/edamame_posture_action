name: "Setup EDAMAME Posture"
description: "Download and control EDAMAME Posture"
inputs:
  edamame_user:
    description: "EDAMAME user (required to start the process in the background)"
    required: false
  edamame_domain:
    description: "EDAMAME domain (required to start the process in the background)"
    required: false
  edamame_pin:
    description: "EDAMAME PIN (required to start the process in the background)"
    required: false
  edamame_id:
    description: "EDAMAME identifier suffix (required to start the process in the background)"
    required: false
  edamame_policy:
    description: "EDAMAME policy name that the device must comply with (the action will fail if the device does not comply)"
    required: false
  edamame_minimum_score:
    description: "Minimum score that the device must achieve (the action will fail if the device does not achieve the minimum score)"
    required: false
  edamame_mandatory_threats:
    description: "Comma separated list of mandatory threats that the device must not exhibit (the action will fail if the device does not detect the threats)"
    required: false
  edamame_mandatory_prefixes:
    description: "Comma separated list of mandatory tag prefixes covering threats that the device must not exhibit (the action will fail if the device does not have the prefixes)"
    required: false
  auto_remediate:
    description: "Automatically remediate posture issues"
    required: false
    default: "false"
  skip_remediations:
    description: "Remediations to skip when performing auto-remediations (comma separated)"
    required: false
  network_scan:
    description: "Scan network for critical devices and capture network traffic (only applicable if the background process is started)"
    required: false
    default: "false"
  dump_sessions_log:
    description: "Dump sessions log (only effective if the background process is started with network_scan set to true)"
    required: false
    default: "false"
  checkout:
    description: "Checkout the repo through the git CLI (retry if access is not granted)"
    required: false
    default: "false"
  checkout_submodules:
    description: "Checkout submodules"
    required: false
    default: "false"
  wait_for_https:
    description: "Wait for https access to the repo be granted"
    required: false
    default: "false"
  wait:
    description: "Wait for a while for access to be granted"
    required: false
    default: "false"
  wait_for_api:
    description: "Wait for API access to be granted"
    required: false
    default: "false"
  token:
    description: "GitHub token to checkout the repo"
    required: false
    default: ${{ github.token }}
  display_logs:
    description: "Display posture logs"
    required: false
    default: "true"
  whitelist:
    description: "Whitelist to use for the network scan (only applicable if the background process is started)"
    required: false
    default: "github"
  whitelist_conformance:
    description: "Exit with error when non-compliant endpoints are detected (only applicable if the background process is started)"
    required: false
    default: "false"
  report_email:
    description: "Report email address"
    required: false
    default: ""

runs:
  using: "composite"

  steps:
    - name: Dependencies
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          cd
          # Install wget, curl, jq using Chocolatey if not already installed
          if ! choco list | grep -E '^wget[[:space:]]'; then
            echo "Installing wget..."
            # --no-progress is not supported by all Chocolatey version/systems, we rather filter lines with "Progress:"
            choco install wget -y | grep -v "Progress:"
          fi
          if ! choco list | grep -q '^curl[[:space:]]'; then
            echo "Installing curl..."
            # --no-progress is not supported by all Chocolatey version/systems, we rather filter lines with "Progress:"
            choco install curl -y | grep -v "Progress:"
          fi
          if ! choco list | grep -q '^jq[[:space:]]'; then
            echo "Installing jq..."
            # --no-progress is not supported by all Chocolatey version/systems, we rather filter lines with "Progress:"
            choco install jq -y | grep -v "Progress:"
          fi

          # Install node if not installed
          if ! choco list | grep -q '^nodejs[[:space:]]'; then
            echo "Installing nodejs..."
            # --no-progress is not supported by all Chocolatey version/systems, we rather filter lines with "Progress:"
            choco install nodejs -y | grep -v "Progress:"
          fi

          # Install vcredist2015 if not installed
          if ! choco list | grep -q '^vcredist2015[[:space:]]'; then
            echo "Installing vcredist2015..."
            # --no-progress is not supported by all Chocolatey version/systems, we rather filter lines with "Progress:"
            choco install vcredist2015 --package-parameters "/install /quiet /norestart" -y | grep -v "Progress:"
          fi

          # Check and download Packet.dll
          if [ ! -f "Packet.dll" ]; then
              echo "Packet.dll not found. Downloading..."
              wget --no-verbose https://github.com/edamametechnologies/edamame_posture_cli/raw/refs/heads/main/windows/Packet.dll -O Packet.dll
              chmod +x Packet.dll
          else
              echo "Packet.dll already exists. Skipping download."
          fi

          # Check and download wpcap.dll
          if [ ! -f "wpcap.dll" ]; then
              echo "wpcap.dll not found. Downloading..."
              wget --no-verbose https://github.com/edamametechnologies/edamame_posture_cli/raw/refs/heads/main/windows/wpcap.dll -O wpcap.dll
              chmod +x wpcap.dll
          else
              echo "wpcap.dll already exists. Skipping download."
          fi
        elif [[ "$RUNNER_OS" == "Linux" ]]; then

          # Wait for apt lock to be released, up to 300 seconds
          TIMEOUT=300
          TIME_PASSED=0
          while sudo fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do
            echo "Waiting for apt lock to be released..."
            sleep 1
            TIME_PASSED=$(( TIME_PASSED + 1 ))
            if [ $TIME_PASSED -ge $TIMEOUT ]; then
              echo "Timed out waiting for apt lock after $TIMEOUT seconds."
              exit 1
            fi
          done
          sudo apt-get update

          # Check/install git
          if ! command -v git &> /dev/null; then
            echo "Installing git..."
            sudo apt-get install -y git
          fi

          # Check/install wget
          if ! command -v wget &> /dev/null; then
            echo "Installing wget..."
            sudo apt-get install -y wget
          fi

          # Check/install curl
          if ! command -v curl &> /dev/null; then
            echo "Installing curl..."
            sudo apt-get install -y curl
          fi

          # Check/install jq
          if ! command -v jq &> /dev/null; then
            echo "Installing jq..."
            sudo apt-get install -y jq
          fi

          # Check/install libpcap0.8
          if ! dpkg -s libpcap0.8 &> /dev/null; then
            echo "Installing libpcap0.8..."
            sudo apt-get install -y libpcap0.8
          fi

          # Check/install build-essential
          if ! dpkg -s build-essential &> /dev/null; then
            echo "Installing build-essential..."
            sudo apt-get install -y build-essential
          fi

          # Check/install node + npm
          if ! command -v node &> /dev/null; then
            echo "Installing node + npm..."
            sudo apt-get install -y nodejs npm
          fi
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          # Check/install wget
          if ! command -v wget &> /dev/null; then
            echo "Installing wget..."
            brew install wget
          fi

          # Check/install curl
          if ! command -v curl &> /dev/null; then
            echo "Installing curl..."
            brew install curl
          fi

          # Check/install jq
          if ! command -v jq &> /dev/null; then
            echo "Installing jq..."
            brew install jq
          fi

          # Check/install node
          if ! command -v node &> /dev/null; then
            echo "Installing node..."
            brew install node
          fi
        else
          echo "Unsupported OS: $RUNNER_OS"
          exit 1
        fi
      shell: bash

    - name: Download EDAMAME Posture binary
      id: download_binary
      run: |
        JQ=jq
        echo "jq version: $($JQ --version)"
        # Get the latest version from the GitHub releases (don't use gh cli as it would require the IP to be whitelisted)
        # Loop until we get a valid response
        WAIT_TIME=5
        while true; do
          LATEST=$(curl -s https://api.github.com/repos/edamametechnologies/edamame_posture_cli/releases/latest)
          # Check if we have been rate limited
          if [[ $(echo $LATEST | grep -i "API rate limit exceeded") ]]; then
            # Exponential backoff
            WAIT_TIME=$((WAIT_TIME * 2))
            # Max wait time
            if [[ $WAIT_TIME -gt 120 ]]; then
              # Use the latest known valid version
              VERSION=v0.9.19
              echo "Using the latest known valid version: $VERSION"
              break
            fi
            echo "API rate limit exceeded, sleeping for $WAIT_TIME seconds"
            sleep $WAIT_TIME
          else
            VERSION=$(echo $LATEST | $JQ -r '.tag_name')
            break
          fi
        done
        # Get the version without the v prefix
        VERSION=${VERSION#v}
        # Get a previous fallback version in case the latest version is not available for a given OS
        # Loop until we get a valid response
        WAIT_TIME=5
        while true; do
          FALLBACK=$(curl -s https://api.github.com/repos/edamametechnologies/edamame_posture_cli/releases)
          # Check if we have been rate limited
          if [[ $(echo $FALLBACK | grep -i "API rate limit exceeded") ]]; then
            # Exponential backoff
            WAIT_TIME=$((WAIT_TIME * 2))
            # Max wait time
            if [[ $WAIT_TIME -gt 120 ]]; then
              # Use the latest known valid fallback version
              FALLBACK=v0.9.16
              echo "Using the latest known valid fallback version: $FALLBACK"
              break
            fi
            echo "API rate limit exceeded, sleeping for $WAIT_TIME seconds"
            sleep $WAIT_TIME
          else
            FALLBACK_VERSION=$(echo $FALLBACK | $JQ -r '[.[] | select(.draft==false and .prerelease==false)][1].tag_name')
            break
          fi
        done
        # Get the version without the v prefix
        FALLBACK_VERSION=${FALLBACK_VERSION#v}
        if [[ -z "$FALLBACK_VERSION" ]]; then
          FALLBACK_VERSION=$VERSION
        fi

        # We only support edamame_posture installed in the current directory on Windows and macOS
        # Navigate to the home directory
        cd
        binary_present=false

        # On Linux we also provide a deb package to have it installed in /usr/bin
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          if [[ -f edamame_posture || -f /usr/bin/edamame_posture ]]; then
            echo "Binary already present"
            binary_present=true
          else
            echo "Downloading EDAMAME Posture binary for Linux..."
            wget --no-verbose https://github.com/edamametechnologies/edamame_posture_cli/releases/download/v${VERSION}/edamame_posture-${VERSION}-x86_64-unknown-linux-gnu -O edamame_posture || \
            wget --no-verbose https://github.com/edamametechnologies/edamame_posture_cli/releases/download/v${FALLBACK_VERSION}/edamame_posture-${FALLBACK_VERSION}-x86_64-unknown-linux-gnu -O edamame_posture
            chmod u+x edamame_posture
          fi
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          if [[ -f edamame_posture ]]; then
            echo "Binary already present"
            binary_present=true
          else
            echo "Downloading EDAMAME Posture binary for macOS..."
            wget --no-verbose https://github.com/edamametechnologies/edamame_posture_cli/releases/download/v${VERSION}/edamame_posture-${VERSION}-universal-apple-darwin -O edamame_posture || \
            wget --no-verbose https://github.com/edamametechnologies/edamame_posture_cli/releases/download/v${FALLBACK_VERSION}/edamame_posture-${FALLBACK_VERSION}-universal-apple-darwin -O edamame_posture
            chmod u+x edamame_posture
          fi
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          if [[ -f edamame_posture.exe ]]; then
            echo "Binary already present"
            binary_present=true
          else
            echo "Downloading EDAMAME Posture binary for Windows..."
            wget --no-verbose https://github.com/edamametechnologies/edamame_posture_cli/releases/download/v${VERSION}/edamame_posture-${VERSION}-x86_64-pc-windows-msvc.exe -O edamame_posture.exe || \
            wget --no-verbose https://github.com/edamametechnologies/edamame_posture_cli/releases/download/v${FALLBACK_VERSION}/edamame_posture-${FALLBACK_VERSION}-x86_64-pc-windows-msvc.exe -O edamame_posture.exe
          fi
        else
          echo "Unsupported OS: $RUNNER_OS"
          exit 1
        fi

        # Set the output based on whether the binary was already present
        echo "binary_already_present=$binary_present" >> $GITHUB_OUTPUT
      shell: bash

    - name: Set EDAMAME_POSTURE_CMD variable
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          EDAMAME_POSTURE_CMD="./edamame_posture.exe"
          echo "EDAMAME_POSTURE_CMD=$EDAMAME_POSTURE_CMD" >> $GITHUB_ENV
        else
          if command -v edamame_posture >/dev/null 2>&1; then
            EDAMAME_POSTURE_CMD="sudo edamame_posture"
            echo "EDAMAME_POSTURE_CMD=$EDAMAME_POSTURE_CMD" >> $GITHUB_ENV
          else
            EDAMAME_POSTURE_CMD="sudo ./edamame_posture"
            echo "EDAMAME_POSTURE_CMD=$EDAMAME_POSTURE_CMD" >> $GITHUB_ENV
          fi
        fi
      shell: bash

    - name: Show initial posture
      run: |
        cd
        $EDAMAME_POSTURE_CMD score
      shell: bash

    - name: Auto remediate/harden posture issues if requested and if we are not running in a self-hosted runner (the binary is already present)
      run: |
        cd
        if [[ "${{ inputs.auto_remediate }}" == "true" && "${{ steps.download_binary.outputs.binary_already_present }}" == "false" ]]; then
          if [[ "${{ inputs.skip_remediations }}" == "" ]]; then
            echo "No remediations to skip"
            $EDAMAME_POSTURE_CMD remediate
          else
            echo "Skipping remediations: ${{ inputs.skip_remediations }}"
            $EDAMAME_POSTURE_CMD remediate "${{ inputs.skip_remediations }}"
          fi
        fi
      shell: bash

    - name: Report email
      run: |
        cd
        if [[ "${{ inputs.report_email }}" != "" ]]; then
          signature=$($EDAMAME_POSTURE_CMD request-signature | grep Signature | awk '{print $2}')
          echo "Signature: $signature"
          echo "Sending compliance report to email: ${{ inputs.report_email }}"
          $EDAMAME_POSTURE_CMD request-report "${{ inputs.report_email }}" "$signature"
        fi
      shell: bash

    - name: Check local policy compliance
      run: |
        cd
        # Check if minimum score and mandatory threats are provided. Mandatory prefixes are optional.
        if [[ -n "${{ inputs.edamame_minimum_score }}" && -n "${{ inputs.edamame_mandatory_threats }}" ]]; then
          echo "Checking policy compliance with minimum score: ${{ inputs.edamame_minimum_score }}, mandatory threats: ${{ inputs.edamame_mandatory_threats }} and mandatory prefixes: ${{ inputs.edamame_mandatory_prefixes }}"
          
          # Capture the policy check output, also use prefix to check for mandatory threats
          policy_output=$($EDAMAME_POSTURE_CMD check-policy "${{ inputs.edamame_minimum_score }}" "${{ inputs.edamame_mandatory_threats }}" "${{ inputs.edamame_mandatory_prefixes }}")
          policy_status=$?
          
          echo "$policy_output"
          
          # Check if the policy check was successful
          if [[ $policy_status -ne 0 ]]; then
            echo "Device does not comply with the required policy with minimum score: ${{ inputs.edamame_minimum_score }}, mandatory threats: ${{ inputs.edamame_mandatory_threats }} and mandatory prefixes: ${{ inputs.edamame_mandatory_prefixes }}"
            echo "Exiting workflow due to policy non-compliance."
            exit 1
          fi
          
          echo "Device complies with the required policy with minimum score: ${{ inputs.edamame_minimum_score }}, mandatory threats: ${{ inputs.edamame_mandatory_threats }} and mandatory prefixes: ${{ inputs.edamame_mandatory_prefixes }}"
        fi
      shell: bash

    - name: Check domain policy compliance 
      run: |
        cd
        # Check if both domain and policy are provided
        if [[ -n "${{ inputs.edamame_domain }}" && -n "${{ inputs.edamame_policy }}" ]]; then
          echo "Checking policy compliance with domain: ${{ inputs.edamame_domain }} and policy: ${{ inputs.edamame_policy }}"
          
          # Capture the policy check output
          policy_output=$($EDAMAME_POSTURE_CMD check-policy-for-domain "${{ inputs.edamame_domain }}" "${{ inputs.edamame_policy }}")
          policy_status=$?
          
          echo "$policy_output"
          
          # Check if the policy check was successful
          if [[ $policy_status -ne 0 ]]; then
            echo "Device does not comply with the required policy: ${{ inputs.edamame_policy }} and domain: ${{ inputs.edamame_domain }}"
            echo "Exiting workflow due to policy non-compliance."
            exit 1
          fi
          
          echo "Device complies with the required policy: ${{ inputs.edamame_policy }} and domain: ${{ inputs.edamame_domain }}"
        fi
      shell: bash

    - name: Wait for a while if requested
      run: |
        if [[ "${{ inputs.wait }}" == "true" ]]; then
          sleep 180
        fi
      shell: bash

    - name: Start EDAMAME Posture process and wait for connection if all arguments are provided, skip otherwise
      run: |
        cd
        # Check if all arguments are provided
        if [[ -n "${{ inputs.edamame_user }}" && -n "${{ inputs.edamame_domain }}" && -n "${{ inputs.edamame_pin }}" && -n "${{ inputs.edamame_id }}" ]]; then
          if [[ "${{ steps.download_binary.outputs.binary_already_present }}" == "true" ]]; then
            echo "EDAMAME Posture binary is already present. Checking status..."
            $EDAMAME_POSTURE_CMD status > posture_status.txt

            # Check if the output indicates Error getting connection status: transport error
            if grep -q "Error getting connection status: transport error" posture_status.txt; then
              echo "edamame_posture service is installed but isn't connected, please configure it properly in order to use this runner"
              exit 1
            else
              connected=$(grep -i 'connected:' posture_status.txt | awk -F': ' '{print $2}')
              echo "Connected: $connected"

              # Compare with inputs
              if [[ "$connected" == "true" ]]; then
                echo "EDAMAME Posture is already running with the specified user and domain. Skipping start process."
                # Exit the step successfully to proceed to the next step
                exit 0
              else
                echo "edamame_posture service is installed but isn't connected, please configure it properly in order to use this runner"
                exit 1
              fi
            fi
          fi

          # Add a unique suffix to the edamame_id to avoid conflicts using matrix jobs
          # ms since epoch
          IDSUFFIX=$(node -e "console.log(Date.now())")

          if [[ "${{ inputs.whitelist }}" != "" ]]; then
            if [[ "$RUNNER_OS" == "Windows" ]]; then
              WHITELIST="${{ inputs.whitelist }}_windows"
            elif [[ "$RUNNER_OS" == "macOS" ]]; then
              WHITELIST="${{ inputs.whitelist }}_macos"
            else
              WHITELIST="${{ inputs.whitelist }}_ubuntu"
            fi
          else
            WHITELIST=""
          fi

          echo "Starting EDAMAME Posture..."
          $EDAMAME_POSTURE_CMD start "${{ inputs.edamame_user }}" "${{ inputs.edamame_domain }}" "${{ inputs.edamame_pin }}" "${{ inputs.edamame_id }}_$IDSUFFIX" "${{ inputs.network_scan }}" $WHITELIST
          echo "Waiting for connection..."
          $EDAMAME_POSTURE_CMD wait-for-connection
        else
          # Check if only a partial set of mandatory arguments is provided
          if [[ -n "${{ inputs.edamame_user }}${{ inputs.edamame_domain }}${{ inputs.edamame_pin }}${{ inputs.edamame_id }}" ]]; then
            echo "Please provide all required arguments: edamame_user, edamame_domain, edamame_pin, edamame_id"
            exit 1
          fi
        fi
      shell: bash

    - name: Checkout the repo through the git CLI if requested
      run: |
        if [[ "${{ inputs.checkout }}" == "true" ]]; then
          timeout=true

          # Initialize the repo if it doesn't exist
          git init || true
          # Add the remote if it doesn't exist
          git remote add origin https://x-access-token:${{ inputs.token }}@github.com/${{ github.repository }}.git || true
          for i in {1..10}; do
            echo "Attempt $i: Checking out the repo through the git CLI..."
            if git fetch --depth=1 origin ${{ github.ref }}; then
              branch_name=$(echo "${{ github.ref }}" | sed -e "s/^refs\/heads\///")
              if git checkout -b "$branch_name" FETCH_HEAD; then
                if [[ "${{ inputs.checkout_submodules }}" == "true" ]]; then
                  git submodule update --init --recursive
                fi
                timeout=false
                break
              fi
            else
              echo "Checkout of the repo through the git CLI failed. Waiting for 60 seconds..."
              sleep 60
            fi
          done

          elapsed_time=$((i * 60))
          elapsed_minutes=$((elapsed_time / 60))
          elapsed_seconds=$((elapsed_time % 60))

          if [ "$timeout" = true ]; then
            echo "Timeout occurred while waiting for access to the repo through the git CLI."
            echo "Total time before timeout: ${elapsed_minutes} minutes and ${elapsed_seconds} seconds."
            # Dump the logs
            cd
            $EDAMAME_POSTURE_CMD logs
            exit 1
          else
            echo "Checkout of the repo through the git CLI succeeded."
            echo "Time taken to checkout: ${elapsed_minutes} minutes and ${elapsed_seconds} seconds."

            # Verify the checked out commit and branch
            echo "Checked out branch: $(git rev-parse --abbrev-ref HEAD)"
            echo "Checked out commit: $(git rev-parse HEAD)"
            if [ "$(git rev-parse HEAD)" != "${{ github.sha }}" ]; then
              echo "Warning: The checked out commit does not match the expected SHA."
              echo "Expected: ${{ github.sha }}"
              echo "Actual: $(git rev-parse HEAD)"
            fi
          fi
        fi
      shell: bash

    - name: Wait for API access to be granted if requested
      run: |
        if [[ "${{ inputs.wait_for_api }}" == "true" ]]; then
          attempts=0
          timeout=true
          for i in {1..10}; do
            attempts=$((attempts + 1))
            # We use the GitHub token to access the API using gh release list that requires authentication limited to the scope of the token
            if gh release list --repo ${{ github.repository }}; then
              timeout=false
              break
            else
              sleep 60
            fi
          done

          elapsed_time=$((attempts * 60))
          elapsed_minutes=$((elapsed_time / 60))
          elapsed_seconds=$((elapsed_time % 60))

          if [ "$timeout" = true ]; then
            echo "Timeout occurred while waiting for API access."
            echo "Total time before timeout: ${elapsed_minutes} minutes and ${elapsed_seconds} seconds."
            # Dump the logs
            cd
            $EDAMAME_POSTURE_CMD logs
            exit 1
          else
            echo "API access granted."
            echo "Time taken to grant access: ${elapsed_minutes} minutes and ${elapsed_seconds} seconds."
          fi
        fi
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Wait for https access to the repo be granted if requested
      run: |
        if [[ "${{ inputs.wait_for_https }}" == "true" ]]; then
          attempts=0
          timeout=true
          repo_url="https://github.com/${{ github.repository }}.git"

          for i in {1..10}; do
            attempts=$((attempts + 1))
            echo "Attempt $attempts: Checking https access to the repo..."
            status_code=$(curl -o /dev/null -s -w "%{http_code}" -H "Authorization: token ${{ inputs.token }}" $repo_url)

            if [[ "$status_code" == "301" || "$status_code" == "200" ]]; then
              timeout=false
              break
            else
              echo "https access to the repo not yet granted. Curl Status Code: $status_code. Waiting for 60 seconds..."
              sleep 60
            fi
          done

          elapsed_time=$((attempts * 60))
          elapsed_minutes=$((elapsed_time / 60))
          elapsed_seconds=$((elapsed_time % 60))

          if [ "$timeout" = true ]; then
            echo "Timeout occurred while waiting for https access to the repo."
            echo "Total time before timeout: ${elapsed_minutes} minutes and ${elapsed_seconds} seconds."
            # Dump the logs
            cd
            $EDAMAME_POSTURE_CMD logs
            exit 1
          else
            echo "https access to the repo granted."
            echo "Time taken to grant access: ${elapsed_minutes} minutes and ${elapsed_seconds} seconds."
          fi
        fi
      shell: bash

    - name: Display posture logs
      run: |
        if [[ "${{ inputs.display_logs }}" == "true" ]]; then
          cd
          $EDAMAME_POSTURE_CMD logs
        fi
      shell: bash

    - name: Dump sessions log if requested
      run: |
        if [[ "${{ inputs.dump_sessions_log }}" == "true" ]]; then
          cd
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            # Not in place due to license issues
            echo "Dumping sessions log is not supported on Windows."
          else
            $EDAMAME_POSTURE_CMD get-sessions || if [[ "${{ inputs.whitelist_conformance }}" == "true" ]]; then exit 1; fi
          fi
        fi
      shell: bash
