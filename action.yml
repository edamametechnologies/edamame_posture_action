name: 'Setup EDAMAME Posture'
description: 'Download and start EDAMAME Posture'
inputs:
  edamame_user:
    description: 'EDAMAME Posture User'
    required: false
  edamame_domain:
    description: 'EDAMAME Posture Domain'
    required: false
  edamame_pin:
    description: 'EDAMAME Posture PIN'
    required: false
  edamame_id:
    description: 'EDAMAME identifier suffix'
    required: false
  auto_remediate:
    description: 'Automatically remediate posture issues'
    required: false
    default: 'false'
  skip_remediations:
    description: 'Remediations to skip (comma separated)'
    required: false
  network_scan:
    description: 'Scan network for critical devices'
    required: false
    default: 'false'
  wait_for_repo:
    description: 'Wait for access to the repo'
    required: false
    default: 'true'
  wait_for_api:
    description: 'Wait for API access to be granted'
    required: false
    default: 'false'

runs:
  using: 'composite'

  steps:

    - name: Dependencies
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          choco install wget
        fi
      shell: bash

    - name: Download EDAMAME Posture binary
      run: |
        # Position the binary in the home folder of the runner
        cd ..
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          wget https://edamame-posture.s3.eu-west-1.amazonaws.com/dev/linux/0.3.84/edamame_posture
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          wget https://edamame-posture.s3.eu-west-1.amazonaws.com/dev/macos/0.3.84/edamame_posture
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          wget https://edamame-posture.s3.eu-west-1.amazonaws.com/dev/windows/0.3.84/edamame_posture.exe
        else
          echo "Unsupported OS: $RUNNER_OS"
          exit 1
        fi
        chmod u+x edamame_posture*
      shell: bash

    - name: Show initial posture
      run: |
        cd ..
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          # No sudo on Windows
          ./edamame_posture.exe score
        else
          sudo ./edamame_posture score
        fi
      shell: bash

    - name: Auto remediate posture issues if requested
      run: |
        cd ..
        if [[ "${{ inputs.auto_remediate }}" == "true" ]]; then
          if [[ "${{ inputs.skip_remediations }}" == "" ]]; then
            echo "No remediations to skip"
            if [[ "$RUNNER_OS" == "Windows" ]]; then
              # No sudo on Windows
              ./edamame_posture.exe remediate
            else
              sudo ./edamame_posture remediate
            fi
          else 
            echo "Skipping remediations: ${{ inputs.skip_remediations }}"
            if [[ "$RUNNER_OS" == "Windows" ]]; then
              # No sudo on Windows
              ./edamame_posture.exe remediate "${{ inputs.skip_remediations }}"
            else
              sudo ./edamame_posture remediate "${{ inputs.skip_remediations }}"
            fi
          fi
        fi
      shell: bash

    - name: Start EDAMAME Posture process and wait for connection if all arguments are provided, skip otherwise
      run: |
        cd ..
        # Check if all arguments are provided
        if [[ -n "${{ inputs.edamame_user }}" && -n "${{ inputs.edamame_domain }}" && -n "${{ inputs.edamame_pin }}" && -n "${{ inputs.edamame_id }}" ]]; then
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            # No sudo on Windows
            ./edamame_posture.exe start "${{ inputs.edamame_user }}" "${{ inputs.edamame_domain }}" "${{ inputs.edamame_pin }}" "${{ inputs.edamame_id }}" "${{ inputs.network_scan }}"
            ./edamame_posture.exe wait-for-connection
          else
            sudo ./edamame_posture start "${{ inputs.edamame_user }}" "${{ inputs.edamame_domain }}" "${{ inputs.edamame_pin }}" "${{ inputs.edamame_id }}" "${{ inputs.network_scan }}"
            sudo ./edamame_posture wait-for-connection
          fi
        else
          # Check if only a partial set of mandatory arguments is provided
          if [[ -n "${{ inputs.edamame_user }}${{ inputs.edamame_domain }}${{ inputs.edamame_pin }}${{ inputs.edamame_id }}" ]]; then
            echo "Please provide all required arguments: edamame_user, edamame_domain, edamame_pin, edamame_id"
          exit 1
          fi
        fi
      shell: bash

    - name: Wait for repo access to be granted
      run: |
        if [[ "${{ inputs.wait_for_repo }}" == "true" ]]; then
          attempts=0
          timeout=true
          # Setup the git config
          git config --global user.email "runner@edamame.tech"
          git config --global user.name "EDAMAME Technologies"
          for i in {1..20}; do
            attempts=$((attempts + 1))
            echo "Attempt $attempts: Checking repository access..."
            # Check repo access without using gh but git
            if git ls-remote https://${{ github.token }}@github.com/${{ github.repository }}; then
              timeout=false
              break
            else
              echo "Repository access not yet granted. Waiting for 60 seconds..."
              sleep 60
            fi
          done
        
          elapsed_time=$((attempts * 60))
          elapsed_minutes=$((elapsed_time / 60))
          elapsed_seconds=$((elapsed_time % 60))
        
          if [ "$timeout" = true ]; then
            echo "Timeout occurred while waiting for repository access."
            echo "Total time before timeout: ${elapsed_minutes} minutes and ${elapsed_seconds} seconds."
            exit 1
          else
            echo "Repository access granted."
            echo "Time taken to grant access: ${elapsed_minutes} minutes and ${elapsed_seconds} seconds."
          fi
        fi
      shell: bash

    - name: Wait for api access to be granted
      run: |
        if [[ "${{ inputs.wait_for_api }}" == "true" ]]; then
          attempts=0
          timeout=true
          for i in {1..20}; do
            attempts=$((attempts + 1))
            # We use the GitHub token to access the API using gh release list that requires authentication limited to the scope of the token
            if gh release list --repo ${{ github.repository }}; then
              timeout=false
              break
            else
              sleep 60
            fi
          done
        
          elapsed_time=$((attempts * 60))
          elapsed_minutes=$((elapsed_time / 60))
          elapsed_seconds=$((elapsed_time % 60))
          
          if [ "$timeout" = true ]; then
            echo "Timeout occurred while waiting for API access."
            echo "Total time before timeout: ${elapsed_minutes} minutes and ${elapsed_seconds} seconds."
            exit 1
          else
            echo "API access granted."
            echo "Time taken to grant access: ${elapsed_minutes} minutes and ${elapsed_seconds} seconds."
          fi
        fi
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
