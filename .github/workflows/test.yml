name: Test

on:
  schedule:
    # Run daily at 01:00 UTC
    - cron: '0 1 * * *'
  workflow_dispatch:
  push:
    branches:
      - 'dev'
      - 'main'
      
# Auto cancel previous runs if they were not completed.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# Declare default permissions as read only.
permissions: read-all

jobs:
  test-native:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Regular OS tests
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            arch: x86_64
          - os: windows-latest
            arch: x86_64
          # Linux aarch64 tests using QEMU
          - os: ubuntu-latest
            arch: aarch64
            target: aarch64-unknown-linux-gnu
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90

    steps:
      # Set up QEMU for aarch64 emulation
      - name: Set up QEMU
        if: matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      # We don't use the EDAMAME Posture Action here, because we want to fully test the action.yml file
      - name: Checkout
        uses: actions/checkout@v4

      # Test start
      - name: Test start
        id: test-start
        uses: ./ # Use the local action definition (action.yaml)
        with:
          edamame_user: ${{ vars.EDAMAME_POSTURE_USER }}
          edamame_domain: ${{ vars.EDAMAME_POSTURE_DOMAIN }}
          edamame_pin: ${{ secrets.EDAMAME_POSTURE_PIN }}
          edamame_id: ${{ github.run_id }}-native-${{ matrix.os }}-${{ matrix.arch }}
          # Don't checkout the repo, we already did that in the previous step
          checkout: false
          # Set to true to test the whitelist creation
          # Disabled on Windows as GitHub managed Windows runners configuration makes this too slow
          network_scan: ${{ matrix.os == 'windows' && 'false' || 'true' }}
        continue-on-error: true

      # Test check-policy (local)
      - name: Test check-policy (local)
        id: test-check-policy-local
        uses: ./
        with:
          edamame_minimum_score: 1.0
          edamame_mandatory_threats: "encrypted disk disabled"
          edamame_mandatory_prefixes: ""
        continue-on-error: true
        
      # Test check-policy-for-domain
      - name: Test check-policy-for-domain
        id: test-check-policy-for-domain
        uses: ./
        with:
          edamame_domain: ${{ vars.EDAMAME_POSTURE_DOMAIN }}
          edamame_policy: "Github"
        continue-on-error: true

      # Test check-policy (local) with error
      - name: Test check-policy (local) with error
        id: test-check-policy-local-error
        uses: ./
        with:
          edamame_minimum_score: 5.0
          edamame_mandatory_threats: "no EPP"
          edamame_mandatory_prefixes: ""
        continue-on-error: true
      
      # Test check-policy-for-domain with error
      - name: Test check-policy-for-domain with error
        id: test-check-policy-for-domain-error
        uses: ./
        with:
          edamame_domain: ${{ vars.EDAMAME_POSTURE_DOMAIN }}
          edamame_policy: "Invalid policy"
        continue-on-error: true

      # Test dump sessions
      - name: Test dump sessions
        id: test-dump-sessions
        uses: ./
        with:
          dump_sessions_log: true
          exit_on_whitelist_exceptions: false
        continue-on-error: true

      # Test create custom whitelists on macOS and Linux
      - name: Test create custom whitelists on macOS and Linux
        id: test-create-custom-whitelist
        if: runner.os == 'macos' || runner.os == 'linux'
        uses: ./
        with:
          create_custom_whitelists: true
          custom_whitelists_path: custom_whitelists.json
        continue-on-error: true
        
      # Test set custom whitelist
      - name: Test set custom whitelist
        id: test-set-custom-whitelist
        if: (runner.os == 'macos' || runner.os == 'linux') && steps.test-create-custom-whitelist.outcome == 'success'
        uses: ./
        with:
          set_custom_whitelists: true
          custom_whitelists_path: custom_whitelists.json
        continue-on-error: true
        
      # Test augment custom whitelist
      - name: Test augment custom whitelist
        id: test-augment-whitelist
        if: (runner.os == 'macos' || runner.os == 'linux') && steps.test-set-custom-whitelist.outcome == 'success'
        uses: ./
        with:
          augment_custom_whitelists: true
          custom_whitelists_path: custom_whitelists.json
        continue-on-error: true

      # Test stop
      - name: Test stop
        id: test-stop
        uses: ./
        with:
          stop: true
        continue-on-error: true
        
      # Test disconnected mode
      - name: Test disconnected mode
        id: test-disconnected-mode
        uses: ./
        with:
          disconnected_mode: true
          network_scan: true
          whitelist: github
          edamame_minimum_score: 1.0
          edamame_mandatory_threats: "encrypted disk disabled"
        continue-on-error: true

      # Test get sessions with disconnected mode
      - name: Test sessions with disconnected mode
        id: test-sessions-disconnected
        if: steps.test-disconnected-mode.outcome == 'success'
        uses: ./
        with:
          exit_on_whitelist_exceptions: false
          dump_sessions_log: true
        continue-on-error: true
        
      - name: Slack alerts
        if: |
          steps.test-start.outcome != 'success' || 
          steps.test-check-policy-local.outcome != 'success' || 
          steps.test-check-policy-for-domain.outcome != 'success' || 
          steps.test-check-policy-local-error.outcome == 'success' || 
          steps.test-check-policy-for-domain-error.outcome == 'success' || 
          steps.test-dump-sessions.outcome != 'success' || 
          (runner.os != 'Windows' && steps.test-create-custom-whitelist.outcome != 'success') || 
          (runner.os != 'Windows' && steps.test-set-custom-whitelist.outcome != 'success') ||
          (runner.os != 'Windows' && steps.test-augment-whitelist.outcome != 'success') ||
          steps.test-stop.outcome != 'success' ||
          steps.test-disconnected-mode.outcome != 'success' ||
          steps.test-sessions-disconnected.outcome != 'success'
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: 'C072J0U9TH7'
          slack-message: |
            *Test Results for ${{ github.repository }} (${{ runner.os }}-${{ matrix.arch }})*:
            - Start: ${{ steps.test-start.outcome == 'success' && '✅ Success' || '❌ Failed' }}
            - Check Policy (Local): ${{ steps.test-check-policy-local.outcome == 'success' && '✅ Success' || '❌ Failed' }}
            - Check Policy (Domain): ${{ steps.test-check-policy-for-domain.outcome == 'success' && '✅ Success' || '❌ Failed' }}
            - Check Policy Error Test: ${{ steps.test-check-policy-local-error.outcome != 'success' && '✅ Success' || '❌ Failed' }}
            - Check Domain Policy Error Test: ${{ steps.test-check-policy-for-domain-error.outcome != 'success' && '✅ Success' || '❌ Failed' }}
            - Dump Sessions: ${{ steps.test-dump-sessions.outcome == 'success' && '✅ Success' || '❌ Failed' }}
            - Create Custom Whitelist: ${{ (runner.os == 'Windows' || steps.test-create-custom-whitelist.outcome == 'success') && '✅ Success' || '❌ Failed' }}
            - Set Custom Whitelist: ${{ (runner.os == 'Windows' || steps.test-set-custom-whitelist.outcome == 'success') && '✅ Success' || '❌ Failed' }}
            - Augment Whitelist: ${{ (runner.os == 'Windows' || steps.test-augment-whitelist.outcome == 'success') && '✅ Success' || '❌ Failed' }}
            - Disconnected Mode: ${{ steps.test-disconnected-mode.outcome == 'success' && '✅ Success' || '❌ Failed' }}
            - Sessions Disconnected: ${{ steps.test-sessions-disconnected.outcome == 'success' && '✅ Success' || '❌ Failed' }}
            Branch: ${{ github.ref }}
            More details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Fail job if tests failed
        if: |
          steps.test-start.outcome != 'success' || 
          steps.test-check-policy-local.outcome != 'success' || 
          steps.test-check-policy-for-domain.outcome != 'success' || 
          steps.test-check-policy-local-error.outcome == 'success' || 
          steps.test-check-policy-for-domain-error.outcome == 'success' || 
          steps.test-dump-sessions.outcome != 'success' || 
          (runner.os != 'Windows' && steps.test-create-custom-whitelist.outcome != 'success') || 
          (runner.os != 'Windows' && steps.test-set-custom-whitelist.outcome != 'success') ||
          (runner.os != 'Windows' && steps.test-augment-whitelist.outcome != 'success') ||
          steps.test-stop.outcome != 'success' ||
          steps.test-disconnected-mode.outcome != 'success' ||
          steps.test-sessions-disconnected.outcome != 'success'
        run: |
          echo "Forcing job to fail because tests did not succeed."
          exit 1

  test-container:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Container-based tests for older Ubuntu versions
          - os: ubuntu-latest
            container_image: ubuntu:20.04
            container_name: ubuntu-20.04
          - os: ubuntu-latest
            container_image: ubuntu:18.04
            container_name: ubuntu-18.04
    runs-on: ${{ matrix.os }}
    container:
      image: ${{ matrix.container_image }}
      # Needed for network tests
      options: --cap-add=NET_ADMIN --cap-add=NET_RAW
    timeout-minutes: 90

    steps:
      # Needed when we are running in a container
      - name: Setup permissions for git and install missing packages
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update -y
          apt-get install -y git curl
          git config --global --add safe.directory '*'

      # We don't use the EDAMAME Posture Action here, because we want to fully test the action.yml file
      # Manual checkout because actions/checkout@v4 requires node20 which is not supported on older Ubuntu containers
      - name: Manual checkout for containers
        run: |
          git clone https://github.com/${{ github.repository }}.git .
          git checkout ${{ github.ref_name }}

      # Test start
      - name: Test start
        id: test-start
        uses: ./ # Use the local action definition (action.yaml)
        with:
          edamame_user: ${{ vars.EDAMAME_POSTURE_USER }}
          edamame_domain: ${{ vars.EDAMAME_POSTURE_DOMAIN }}
          edamame_pin: ${{ secrets.EDAMAME_POSTURE_PIN }}
          edamame_id: ${{ github.run_id }}-container-${{ matrix.container_name }}
          # Don't checkout the repo, we already did that in the previous step
          checkout: false
          # Set to true to test the whitelist creation
          network_scan: true
        continue-on-error: true

      # Test check-policy (local)
      - name: Test check-policy (local)
        id: test-check-policy-local
        uses: ./
        with:
          edamame_minimum_score: 1.0
          edamame_mandatory_threats: "encrypted disk disabled"
          edamame_mandatory_prefixes: ""
        continue-on-error: true

      # Test check-policy-for-domain
      - name: Test check-policy-for-domain
        id: test-check-policy-for-domain
        uses: ./
        with:
          edamame_domain: ${{ vars.EDAMAME_POSTURE_DOMAIN }}
          edamame_policy: "Github"
        continue-on-error: true

      # Test check-policy (local) with error
      - name: Test check-policy (local) with error
        id: test-check-policy-local-error
        uses: ./
        with:
          edamame_minimum_score: 5.0
          edamame_mandatory_threats: "no EPP"
          edamame_mandatory_prefixes: ""
        continue-on-error: true
      
      # Test check-policy-for-domain with error
      - name: Test check-policy-for-domain with error
        id: test-check-policy-for-domain-error
        uses: ./
        with:
          edamame_domain: ${{ vars.EDAMAME_POSTURE_DOMAIN }}
          edamame_policy: "Invalid policy"
        continue-on-error: true

      # Test dump sessions
      - name: Test dump sessions
        id: test-dump-sessions
        uses: ./
        with:
          dump_sessions_log: true
          exit_on_whitelist_exceptions: false
        continue-on-error: true

      # Test create custom whitelists
      - name: Test create custom whitelists
        id: test-create-custom-whitelist
        uses: ./
        with:
          create_custom_whitelists: true
          custom_whitelists_path: custom_whitelists.json
        continue-on-error: true
        
      # Test set custom whitelist
      - name: Test set custom whitelist
        id: test-set-custom-whitelist
        if: steps.test-create-custom-whitelist.outcome == 'success'
        uses: ./
        with:
          set_custom_whitelists: true
          custom_whitelists_path: custom_whitelists.json
        continue-on-error: true

      # Test augment custom whitelist
      - name: Test augment custom whitelist
        id: test-augment-whitelist
        if: steps.test-set-custom-whitelist.outcome == 'success'
        uses: ./
        with:
          augment_custom_whitelists: true
          custom_whitelists_path: custom_whitelists.json
        continue-on-error: true

      # Test stop
      - name: Test stop
        id: test-stop
        uses: ./
        with:
          stop: true
        continue-on-error: true

      # Test disconnected mode
      - name: Test disconnected mode
        id: test-disconnected-mode
        uses: ./
        with:
          disconnected_mode: true
          network_scan: true
          whitelist: github
          edamame_minimum_score: 1.0
          edamame_mandatory_threats: "encrypted disk disabled"
        continue-on-error: true

      # Test get sessions with disconnected mode
      - name: Test sessions with disconnected mode
        id: test-sessions-disconnected
        if: steps.test-disconnected-mode.outcome == 'success'
        uses: ./
        with:
          exit_on_whitelist_exceptions: false
          dump_sessions_log: true
        continue-on-error: true

      - name: Slack alerts
        # Won't work on 18.04 because of glibc version
        if: |
          (steps.test-start.outcome != 'success' || 
          steps.test-check-policy-local.outcome != 'success' || 
          steps.test-check-policy-for-domain.outcome != 'success' ||
          steps.test-check-policy-local-error.outcome == 'success' ||
          steps.test-check-policy-for-domain-error.outcome == 'success' ||
          steps.test-dump-sessions.outcome != 'success' ||
          steps.test-create-custom-whitelist.outcome != 'success' ||
          steps.test-set-custom-whitelist.outcome != 'success' ||
          steps.test-augment-whitelist.outcome != 'success' ||
          steps.test-disconnected-mode.outcome != 'success' ||
          steps.test-sessions-disconnected.outcome != 'success' ||
          steps.test-stop.outcome != 'success') && !contains(matrix.container_name, '18.04')
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: 'C072J0U9TH7'
          slack-message: |
            *Container Test Results for ${{ github.repository }} (${{ matrix.container_name }})*:
            - Start: ${{ steps.test-start.outcome == 'success' && '✅ Success' || '❌ Failed' }}
            - Check Policy (Local): ${{ steps.test-check-policy-local.outcome == 'success' && '✅ Success' || '❌ Failed' }}
            - Check Policy (Domain): ${{ steps.test-check-policy-for-domain.outcome == 'success' && '✅ Success' || '❌ Failed' }}
            - Check Policy Error Test: ${{ steps.test-check-policy-local-error.outcome != 'success' && '✅ Success' || '❌ Failed' }}
            - Check Domain Policy Error Test: ${{ steps.test-check-policy-for-domain-error.outcome != 'success' && '✅ Success' || '❌ Failed' }}
            - Dump Sessions: ${{ steps.test-dump-sessions.outcome == 'success' && '✅ Success' || '❌ Failed' }}
            - Create Custom Whitelist: ${{ steps.test-create-custom-whitelist.outcome == 'success' && '✅ Success' || '❌ Failed' }}
            - Set Custom Whitelist: ${{ (runner.os == 'Windows' || steps.test-set-custom-whitelist.outcome == 'success') && '✅ Success' || '❌ Failed' }}
            - Augment Whitelist: ${{ (runner.os == 'Windows' || steps.test-augment-whitelist.outcome == 'success') && '✅ Success' || '❌ Failed' }}
            - Disconnected Mode: ${{ steps.test-disconnected-mode.outcome == 'success' && '✅ Success' || '❌ Failed' }}
            - Sessions Disconnected: ${{ steps.test-sessions-disconnected.outcome == 'success' && '✅ Success' || '❌ Failed' }}
            - Stop: ${{ steps.test-stop.outcome == 'success' && '✅ Success' || '❌ Failed' }}
            Branch: ${{ github.ref }}
            More details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Fail job if tests failed
        if: |
          steps.test-start.outcome != 'success' || 
          steps.test-check-policy-local.outcome != 'success' || 
          steps.test-check-policy-for-domain.outcome != 'success' ||
          steps.test-check-policy-local-error.outcome == 'success' ||
          steps.test-check-policy-for-domain-error.outcome == 'success' ||
          steps.test-dump-sessions.outcome != 'success' ||
          steps.test-create-custom-whitelist.outcome != 'success' ||
          steps.test-set-custom-whitelist.outcome != 'success' ||
          steps.test-augment-whitelist.outcome != 'success' ||
          steps.test-disconnected-mode.outcome != 'success' ||
          steps.test-sessions-disconnected.outcome != 'success' ||
          steps.test-stop.outcome != 'success'
        run: |
          echo "## Test Results Summary"
          echo "- Start: ${{ steps.test-start.outcome == 'success' && '✅ Success' || '❌ Failed' }}"
          echo "- Check Policy (Local): ${{ steps.test-check-policy-local.outcome == 'success' && '✅ Success' || '❌ Failed' }}"
          echo "- Check Policy (Domain): ${{ steps.test-check-policy-for-domain.outcome == 'success' && '✅ Success' || '❌ Failed' }}"
          echo "- Check Policy Error Test: ${{ steps.test-check-policy-local-error.outcome != 'success' && '✅ Success' || '❌ Failed' }}"
          echo "- Check Domain Policy Error Test: ${{ steps.test-check-policy-for-domain-error.outcome != 'success' && '✅ Success' || '❌ Failed' }}"
          echo "- Dump Sessions: ${{ steps.test-dump-sessions.outcome == 'success' && '✅ Success' || '❌ Failed' }}"
          echo "- Create Custom Whitelist: ${{ steps.test-create-custom-whitelist.outcome == 'success' && '✅ Success' || '❌ Failed' }}"
          echo "- Set Custom Whitelist: ${{ (runner.os == 'Windows' || steps.test-set-custom-whitelist.outcome == 'success') && '✅ Success' || '❌ Failed' }}"
          echo "- Augment Whitelist: ${{ (runner.os == 'Windows' || steps.test-augment-whitelist.outcome == 'success') && '✅ Success' || '❌ Failed' }}"
          echo "- Disconnected Mode: ${{ steps.test-disconnected-mode.outcome == 'success' && '✅ Success' || '❌ Failed' }}"
          echo "- Sessions Disconnected: ${{ steps.test-sessions-disconnected.outcome == 'success' && '✅ Success' || '❌ Failed' }}"
          echo "- Stop: ${{ steps.test-stop.outcome == 'success' && '✅ Success' || '❌ Failed' }}"
          echo ""
          echo "Forcing job to fail because some tests did not succeed."
          exit 1

  test-alpine:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            arch: aarch64
            target: aarch64-unknown-linux-musl

    runs-on: ${{ matrix.os }}
    # We need to wait a long time for musl aarch64 due to the use of qemu
    timeout-minutes: 180

    steps:
      # Set up QEMU for aarch64 emulation
      - name: Set up QEMU
        if: matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      # Setup Alpine Linux
      - name: Setup Alpine Linux
        uses: jirutka/setup-alpine@v1
        with:
          arch: ${{ matrix.arch }}
          branch: v3.15

      # Install dependencies with apk
      - name: Install dependencies with apk
        run: |
          apk add --no-cache \
            build-base \
            git \
            curl \
            bash \
            sudo
        shell: alpine.sh --root {0}

      # Manual checkout for Alpine
      - name: Manual checkout for Alpine
        run: |
          # Configure git
          git config --global --add safe.directory '*'
          # Clone repository
          git clone https://github.com/${{ github.repository }}.git .
          git checkout ${{ github.ref_name }}
        shell: alpine.sh {0}

      # Test start
      - name: Test start
        id: test-start
        uses: ./ # Use the local action definition (action.yaml)
        with:
          edamame_user: ${{ vars.EDAMAME_POSTURE_USER }}
          edamame_domain: ${{ vars.EDAMAME_POSTURE_DOMAIN }}
          edamame_pin: ${{ secrets.EDAMAME_POSTURE_PIN }}
          edamame_id: ${{ github.run_id }}-alpine-${{ matrix.arch }}-${{ matrix.target }}
          # Don't checkout the repo, we already did that in the previous step
          checkout: false
          # Set to true to test the whitelist creation
          # Disabled on Windows as GitHub managed Windows runners configuration makes this too slow
          network_scan: true
        continue-on-error: true

      # Test check-policy (local)
      - name: Test check-policy (local)
        id: test-check-policy-local
        uses: ./
        with:
          edamame_minimum_score: 1.0
          edamame_mandatory_threats: "encrypted disk disabled"
          edamame_mandatory_prefixes: ""
        continue-on-error: true

      # Test check-policy-for-domain
      - name: Test check-policy-for-domain
        id: test-check-policy-for-domain
        uses: ./
        with:
          edamame_domain: ${{ vars.EDAMAME_POSTURE_DOMAIN }}
          edamame_policy: "Github"
        continue-on-error: true

      # Test check-policy (local) with error
      - name: Test check-policy (local) with error
        id: test-check-policy-local-error
        uses: ./
        with:
          edamame_minimum_score: 5.0
          edamame_mandatory_threats: "no EPP"
          edamame_mandatory_prefixes: ""
        continue-on-error: true
      
      # Test check-policy-for-domain with error
      - name: Test check-policy-for-domain with error
        id: test-check-policy-for-domain-error
        uses: ./
        with:
          edamame_domain: ${{ vars.EDAMAME_POSTURE_DOMAIN }}
          edamame_policy: "Invalid policy"
        continue-on-error: true

      # Test dump sessions
      - name: Test dump sessions
        id: test-dump-sessions
        uses: ./
        with:
          dump_sessions_log: true
          exit_on_whitelist_exceptions: false
        continue-on-error: true

      # Test create custom whitelists
      - name: Test create custom whitelists
        id: test-create-custom-whitelist
        uses: ./
        with:
          create_custom_whitelists: true
          custom_whitelists_path: custom_whitelists.json
        continue-on-error: true
        
      # Test set custom whitelist
      - name: Test set custom whitelist
        id: test-set-custom-whitelist
        if: steps.test-create-custom-whitelist.outcome == 'success'
        uses: ./
        with:
          set_custom_whitelists: true
          custom_whitelists_path: custom_whitelists.json
        continue-on-error: true

      # Test augment custom whitelist
      - name: Test augment custom whitelist
        id: test-augment-whitelist
        if: steps.test-set-custom-whitelist.outcome == 'success'
        uses: ./
        with:
          augment_custom_whitelists: true
          custom_whitelists_path: custom_whitelists.json
        continue-on-error: true

      # Test stop
      - name: Test stop
        id: test-stop
        uses: ./
        with:
          stop: true
        continue-on-error: true

      # Test disconnected mode
      - name: Test disconnected mode
        id: test-disconnected-mode
        uses: ./
        with:
          disconnected_mode: true
          network_scan: true
          whitelist: github
          edamame_minimum_score: 1.0
          edamame_mandatory_threats: "encrypted disk disabled"
        continue-on-error: true

      # Test get sessions with disconnected mode
      - name: Test sessions with disconnected mode
        id: test-sessions-disconnected
        if: steps.test-disconnected-mode.outcome == 'success'
        uses: ./
        with:
          exit_on_whitelist_exceptions: false
          dump_sessions_log: true
        continue-on-error: true
        
      - name: Slack alerts
        if: |
          steps.test-start.outcome != 'success' || 
          steps.test-check-policy-local.outcome != 'success' || 
          steps.test-check-policy-for-domain.outcome != 'success' ||
          steps.test-check-policy-local-error.outcome == 'success' ||
          steps.test-check-policy-for-domain-error.outcome == 'success' ||
          steps.test-dump-sessions.outcome != 'success' ||
          steps.test-create-custom-whitelist.outcome != 'success' ||
          steps.test-set-custom-whitelist.outcome != 'success' ||
          steps.test-augment-whitelist.outcome != 'success' ||
          steps.test-disconnected-mode.outcome != 'success' ||
          steps.test-sessions-disconnected.outcome != 'success' ||
          steps.test-stop.outcome != 'success'
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: 'C072J0U9TH7'
          slack-message: |
            *Alpine Test Results for ${{ github.repository }} (${{ matrix.arch }}-${{ matrix.target }})*:
            - Start: ${{ steps.test-start.outcome == 'success' && '✅ Success' || '❌ Failed' }}
            - Check Policy (Local): ${{ steps.test-check-policy-local.outcome == 'success' && '✅ Success' || '❌ Failed' }}
            - Check Policy (Domain): ${{ steps.test-check-policy-for-domain.outcome == 'success' && '✅ Success' || '❌ Failed' }}
            - Check Policy Error Test: ${{ steps.test-check-policy-local-error.outcome != 'success' && '✅ Success' || '❌ Failed' }}
            - Check Domain Policy Error Test: ${{ steps.test-check-policy-for-domain-error.outcome != 'success' && '✅ Success' || '❌ Failed' }}
            - Dump Sessions: ${{ steps.test-dump-sessions.outcome == 'success' && '✅ Success' || '❌ Failed' }}
            - Create Custom Whitelist: ${{ steps.test-create-custom-whitelist.outcome == 'success' && '✅ Success' || '❌ Failed' }}
            - Set Custom Whitelist: ${{ (runner.os == 'Windows' || steps.test-set-custom-whitelist.outcome == 'success') && '✅ Success' || '❌ Failed' }}
            - Augment Whitelist: ${{ (runner.os == 'Windows' || steps.test-augment-whitelist.outcome == 'success') && '✅ Success' || '❌ Failed' }}
            - Disconnected Mode: ${{ steps.test-disconnected-mode.outcome == 'success' && '✅ Success' || '❌ Failed' }}
            - Sessions Disconnected: ${{ steps.test-sessions-disconnected.outcome == 'success' && '✅ Success' || '❌ Failed' }}
            - Stop: ${{ steps.test-stop.outcome == 'success' && '✅ Success' || '❌ Failed' }}
            Branch: ${{ github.ref }}
            More details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Dump the logs
        shell: alpine.sh --root {0}
        if: always()
        run: |
          echo "--- Dumping Alpine Logs (${{ matrix.arch }}-${{ matrix.target }}) --- "
          find . -name "edamame_*.*" -exec echo "--- {} ---" \; -exec cat {} \; || echo "No logs found in default directory"
          echo "--- Alpine Log Dump Complete ---"

      - name: Fail job if tests failed
        if: |
          steps.test-start.outcome != 'success' || 
          steps.test-check-policy-local.outcome != 'success' || 
          steps.test-check-policy-for-domain.outcome != 'success' ||
          steps.test-check-policy-local-error.outcome == 'success' ||
          steps.test-check-policy-for-domain-error.outcome == 'success' ||
          steps.test-dump-sessions.outcome != 'success' ||
          steps.test-create-custom-whitelist.outcome != 'success' ||
          steps.test-set-custom-whitelist.outcome != 'success' ||
          steps.test-augment-whitelist.outcome != 'success' ||
          steps.test-disconnected-mode.outcome != 'success' ||
          steps.test-sessions-disconnected.outcome != 'success' ||
          steps.test-stop.outcome != 'success'
        shell: alpine.sh {0}
        run: |
          echo "## Test Results Summary (Alpine - ${{ matrix.arch }}-${{ matrix.target }})"
          echo "- Start: ${{ steps.test-start.outcome == 'success' && '✅ Success' || '❌ Failed' }}"
          echo "- Check Policy (Local): ${{ steps.test-check-policy-local.outcome == 'success' && '✅ Success' || '❌ Failed' }}"
          echo "- Check Policy (Domain): ${{ steps.test-check-policy-for-domain.outcome == 'success' && '✅ Success' || '❌ Failed' }}"
          echo "- Check Policy Error Test: ${{ steps.test-check-policy-local-error.outcome != 'success' && '✅ Success' || '❌ Failed' }}"
          echo "- Check Domain Policy Error Test: ${{ steps.test-check-policy-for-domain-error.outcome != 'success' && '✅ Success' || '❌ Failed' }}"
          echo "- Dump Sessions: ${{ steps.test-dump-sessions.outcome == 'success' && '✅ Success' || '❌ Failed' }}"
          echo "- Create Custom Whitelist: ${{ steps.test-create-custom-whitelist.outcome == 'success' && '✅ Success' || '❌ Failed' }}"
          echo "- Set Custom Whitelist: ${{ (runner.os == 'Windows' || steps.test-set-custom-whitelist.outcome == 'success') && '✅ Success' || '❌ Failed' }}"
          echo "- Augment Whitelist: ${{ (runner.os == 'Windows' || steps.test-augment-whitelist.outcome == 'success') && '✅ Success' || '❌ Failed' }}"
          echo "- Disconnected Mode: ${{ steps.test-disconnected-mode.outcome == 'success' && '✅ Success' || '❌ Failed' }}"
          echo "- Sessions Disconnected: ${{ steps.test-sessions-disconnected.outcome == 'success' && '✅ Success' || '❌ Failed' }}"
          echo "- Stop: ${{ steps.test-stop.outcome == 'success' && '✅ Success' || '❌ Failed' }}"
          echo ""
          echo "Forcing alpine job to fail because some tests did not succeed."
          exit 1
